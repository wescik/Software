INITIALIZATION FUNCTIONS

Function that initializes and starts ADC. Must be called prior to any ADC related read function.
No parameters.
Returns 'OK', there is nothing to fail.
TBD: 
	Read some generic ADC register to check SPI operation - then function would return 'OK'/'NOK'.

	RasGO.Analog_IN_Init()



Function that initializes digital GPIOs that are connected to pins no 3 in JOYSTICK connectors. Internally function sets flag if particular pin is input or output.
Parameters:
	io1, io2, io3 - assigned function (number is equal to JOYSTICK conector number). Allowed parameters: 'IN' for general digital input pin, 'OUT' for general ouput pin.
	Default type is 'IN', function can be called without some parameters - see Python reference for default values of parameters. If any other than 'OUT' parameter is given
	pin is initialized as input.
Returns 'OK', there is nothing to fail.
TBD:
	Due to output handling problems with JOYSTICK3_IO (BCM.GPIO4 - dedicated pin for 1-wire interface) this pin should not be used for output, and only for input or 1-wire.
	Would return 'NOK' if any of pins isn't compatible with requested type.

	RasGO.GPIO_Init(io1, io2, io3)



Function that initializes drivers outputs. PWM generator is initialized earlier (for internal PWM object handling), but all other control or signal pins are initialized. 
All outputs are OFF, DC/DC converter on main is disabled (which means that Vcc on drivers PCB is Vbat (no step-up operation)).
No parameters.
Returns 'OK', there is nothing to fail.

	RasGO.Drivers_Init()



ANALOG READ FUNCTIONS

Functions that read voltage from given JOYSTICK X or Y axis. Voltage must be in [0, 3.3V] range.
Parameters:
	joy_no - JOYSTICK number, can be in range [1, 3]
	axis - chosen axis, can be either 'X', or 'Y' (single quotes in call are necessary)
Returned value:
	Normalized value of ADC reading. 'Joy_Axis()' normalizes voltage to range [-100, 100], where 0 is for 1.65V, 'Potentiometer_Value()' normalizes voltage to range [0, 100]
	'NOK' if parameters were incorrect
	
	RasGO.Joy_Axis(joy_no, axis)
	RasGO.Potentiometer_Value(joy_no, axis)



Function that reads actual battery voltage.
No parameters.
Returned value:
	Battery voltage in volts (with resolution  of 10mV).

	RasGO.Batt_Voltage()


	
Function that reads actual current before DC/DC converter on Vcc line (5V that powers the SBC is not measured).
No parameters.
Returned value:
	Current consumption of DC/DC conveter in amps, some sh#tty resolution of 98 mA. We have to improve this.
	
	RasGO.Batt_Current()



Internal function that reads voltage from given ADC channel as raw ADC count. Voltage must be in [0, 3.3V] range.
Parameters:
	channel - ADC channel from range [0, 7]
Returned value:
	RAW ADC count of a given channel from range [0, 1023]
	
	RasGO._RAW_ADC_Value(channel)



DIGITAL IO HANDLING FUNCTIONS

Function that reads logic level of GPIO pin of given JOYSTICK connector.
Parameters:
	joy_no - number of Joystick connector
Returned value:
	'LOW' if low logic level is read
	'HIGH' if high logic level is read
	'NOK' if pin was set as output or parameters were incorrect
	
	RasGO.Joy_GPIO_Read(joy_no)
	
	
	
Function that interprets RAW ADC reading of particular Joystick/Axis as a logic level according to TTL standard.
Parameters:
	joy_no - number of Joystick connector
	axis - chosen axis, can be either 'X', or 'Y' (single quotes in call are necessary)
Returned value:
	'LOW' if low logic level is read (< 0.8V)
	'HIGH' if high logic level is read (> 2.0V)
	'MAYBE' if reading is in the gray zone (0.8V to 2.0V)
	'NOK' if pin was set as output or parameters were incorrect
	
	RasGO.Joy_Axis_Digital_Read(joy_no, axis)



Function that sets logic level of GPIO pin of given JOYSTICK connector.
Parameters:
	joy_no - number of Joystick connector
	state - requested logic state (accepted values are: 0 or False for LOW, any number but 0 or True for HIGH)
Returned value:
	'LOW' if low logic level has been set
	'HIGH' if high logic level has been set
	'NOK' if pin was set as input or parameters were incorrect

	RasGO.Joy_GPIO_Set(joy_no, state)



DRIVERS RELATED FUNCTIONS

Function that enables (or disables) the DC/DC converter on main PCB.
Parameters:
	newstate - requested state of DC/DC converter (accepted values are: 0 or False for DISABLED, any number but 0 or True for ENABLED)
Returns 'OK', there is nothing to fail.

	RasGO.DC_Converter_Enable(newstate)



Function that switches given channel for rotation in particular direction (CW or CCW) with the relative speed.
Parameters:
	channel - given channel, accepted values are from range [1,6]
	pwm - optional parameter, relative revolution speed or relative angle in case of servomotor, valid range is [0, 100] (truncated if outside of valid range), default value is 100
Returned value:
	'OK' if correct parameters were set (improper value of pwm factor is still a correct parameter)
	'NOK' if incorrect channel has been chosen

	RasGO.Motor_CW(channel, pwm)
	RasGO.Motor_CCW(channel, pwm)



Function that stops given channel or all of them. CAUTION! Undesired effects can be observed if any LED modules are in use and function is called with parameter 'all'.
Parameters:
	channel - given channel, accepted values are from range [1,6] or 'all'
Returned value:
	'OK' if correct parameters were set
	'NOK' if incorrect channel has been chosen
	
	RasGO.Motor_stop(channel)



Functions that switches ON or OFF RasGO LED modules driven by given channel.
Parameters:
	channel - given channel, accepted values are from range [1,6]
Returned value:
	'OK' if correct parameters were set
	'NOK' if incorrect channel has been chosen
	
	RasGO.LED_ON(channel)
	RasGO.LED_OFF(channel)



Function that sets desired color on RasGO street signal lamp modules driven by given channel.
Parameters:
	channel - given channel, accepted values are from range [1,6]
	color - desired color, valid values are: {'red', 'yellow', 'green', 'red_yellow'}
Returned value:
	'OK' if correct parameters were set
	'NOK' if parameters were incorrect
	
	RasGO.Signal_Light(channel, color)